AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  blog-application
  
Globals:
  Function:
    Timeout: 30
    Tracing: Active
  Api:
    TracingEnabled: True

Parameters:
  StageName:
    Type: String
    Default: latest
  SecretKey:
    Type: String
    Default: SUPERSECRET
  DBInstanceName:
    Type: String
    Default: orion-database
  SecretName:
    Type: String
    Default: orion-database-secret-credentials
  DBUsername:
    Type: String
    Default: postgres
  DBPassword:
    Type: String
    Default: YourDBPassword
  LambdaSubnet:
    Type: String
    Default: subnet-08f33ef19c5992981
  LambdaSecurityGroup:
    Type: String
    Default: sg-0279e46b390807fa7
  LambdaRoleArn:
    Type: String
    Default: arn:aws:iam::302947422085:role/LambdaRole
  FromEmailAddress:
    Type: String
    Default: your-email-address@example.com
  EmailBucketName:
    Type: String
    Default: orion-innovation-email-templates
  EmailQueueName:
    Type: String
    Default: EmailQueue

Resources:
  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: RDS Credentials
      Name: !Ref SecretName
      SecretString: !Sub "{\"username\": \"${DBUsername}\", \"password\": \"${DBPassword}\"}"
  DBSecretRDSInstanceAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref DBSecret
      TargetId: !Ref DBInstanceName
      TargetType: AWS::RDS::DBInstance

  BlogApplicationDependencies:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleArchitectures:
        - x86_64
      CompatibleRuntimes:
        - nodejs12.x
        - nodejs14.x
        - nodejs16.x
      Content: dependencies/
      Description: "Dependencies layer for Blog Application"
      LayerName: "BlogApplicationDependencies"
      LicenseInfo: "MIT"

  Register:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/user/register/
      Handler: index.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          DB_CONFIG_SECRET_ID: !Ref SecretName
          REGION: !Ref AWS::Region
          SECRET_KEY: !Ref SecretKey
      VpcConfig:
        SubnetIds:
          - !Ref LambdaSubnet
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Role: !Ref LambdaRoleArn
      Layers:
        - !Ref BlogApplicationDependencies
      Events:
        PostRequest:
          Type: Api
          Properties:
            Path: /register
            Method: post
            RestApiId:
              Ref: BlogApplicationAPI

  Login:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/user/login/
      Handler: index.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Layers:
        - !Ref BlogApplicationDependencies
      Environment:
        Variables:
          DB_CONFIG_SECRET_ID: !Ref SecretName
          REGION: !Ref AWS::Region
          SECRET_KEY: !Ref SecretKey
      VpcConfig:
        SubnetIds:
          - !Ref LambdaSubnet
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Role: !Ref LambdaRoleArn
      Events:
        PostRequest:
          Type: Api
          Properties:
            Path: /login
            Method: post
            RestApiId:
              Ref: BlogApplicationAPI
 
  CreatePost:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/post/create-post/
      Handler: index.handler
      Runtime: nodejs16.x
      Layers:
        - !Ref BlogApplicationDependencies
      Architectures:
        - x86_64
      Environment:
        Variables:
          DB_CONFIG_SECRET_ID: !Ref SecretName
          REGION: !Ref AWS::Region
      VpcConfig:
        SubnetIds:
          - !Ref LambdaSubnet
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Role: !Ref LambdaRoleArn
      Events:
        PostRequest:
          Type: Api
          Properties:
            Path: /posts
            Method: post
            RestApiId:
              Ref: BlogApplicationAPI

  EmailBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref EmailBucketName

  NotifyUsers:
    Type: AWS::Serverless::Function
    DependsOn:
      - EmailBucket
    Properties:
      CodeUri: functions/user/notify/
      Handler: index.handler
      Runtime: nodejs16.x
      Layers:
        - !Ref BlogApplicationDependencies
      Architectures:
        - x86_64
      Environment:
        Variables:
          BUCKET: !Ref EmailBucket
          REGION: !Ref AWS::Region
          DB_CONFIG_SECRET_ID: !Ref SecretName
          FROM: !Ref FromEmailAddress
          QUEUE_URL: !Ref EmailQueue
      VpcConfig:
        SubnetIds:
          - !Ref LambdaSubnet
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Role: !Ref LambdaRoleArn
      Events:
        PostRequest:
          Type: Api
          Properties:
            Path: /users/notify
            Method: post
            RestApiId:
              Ref: BlogApplicationAPI

  EmailQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref EmailQueueName
      DelaySeconds: 0
      VisibilityTimeout: 30
      MessageRetentionPeriod: 345600
      ReceiveMessageWaitTimeSeconds: 0
  
  EmailQueuePoller:
    Type: AWS::Serverless::Function
    DependsOn:
      - EmailQueue
    Properties:
      CodeUri: functions/email-queue-poller/
      Handler: index.handler
      Runtime: nodejs16.x
      Layers:
        - !Ref BlogApplicationDependencies
      Architectures:
        - x86_64
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          QUEUE_URL: !Ref EmailQueue
      Role: !Ref LambdaRoleArn
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt EmailQueue.Arn
  
  LambdaTokenAuthorizer:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: functions/authorizer/
      Handler: index.handler
      Runtime: nodejs16.x
      Layers:
        - !Ref BlogApplicationDependencies
      Architectures:
        - x86_64
      Description: Token based HTTP request authorizer.
      Role: !Ref LambdaRoleArn
      Environment:
        Variables:
          SECRET_KEY: !Ref SecretKey
  
  BlogApplicationAPI:
    Type: AWS::Serverless::Api
    DependsOn:
      - LambdaTokenAuthorizer
      - Register
      - Login
      - CreatePost
      - NotifyUsers
    Properties:
      StageName: !Ref StageName
      DefinitionBody:
        swagger: 2.0
        info:
          title: Blog API
        paths:
          /register:
            post:
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Register.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /login:
            post:
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Login.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /posts:
            post:
              responses: {}
              security:
                - LambdaTokenAuthorizer: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreatePost.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /users/notify:
            post:
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotifyUsers.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: POST
                type: aws_proxy
        securityDefinitions:
          LambdaTokenAuthorizer:
            type: "apiKey"
            name: "authorizationToken"
            in: "header"
            x-amazon-apigateway-authtype: "custom"
            x-amazon-apigateway-authorizer:
              type: "token"
              authorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaTokenAuthorizer.Arn}/invocations"
              authorizerResultTtlInSeconds: 0

  BlogApplicationAPILambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref LambdaTokenAuthorizer
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BlogApplicationAPI}/*"

Outputs:
  BlogApplicationAPI:
    Description: "API Gateway endpoint URL for ${StageName} stage for BlogApplicationAPI"
    Value: !Sub "https://${BlogApplicationAPI}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/"
