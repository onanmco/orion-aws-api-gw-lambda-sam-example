AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  blog-application
  
Globals:
  Function:
    Timeout: 30
    Tracing: Active
  Api:
    TracingEnabled: True

Parameters:
  StageName:
    Type: String
    Default: latest
  SecretKey:
    Type: String
    Default: SUPERSECRET
  DBInstanceName:
    Type: String
    Default: orion-database
  SecretName:
    Type: String
    Default: orion-database-secret-credentials
  DBUsername:
    Type: String
    Default: postgres
  DBPassword:
    Type: String
    Default: YourDBPassword
  LambdaSubnet:
    Type: String
    Default: subnet-08f33ef19c5992981
  LambdaSecurityGroup:
    Type: String
    Default: sg-0279e46b390807fa7
  LambdaRoleArn:
    Type: String
    Default: arn:aws:iam::302947422085:role/LambdaRole
  FromEmailAddress:
    Type: String
    Default: your-email-address@example.com
  EmailBucketName:
    Type: String
    Default: orion-innovation-email-templates
  EmailQueueName:
    Type: String
    Default: EmailQueue
  SubscriptionRenewalQueueName:
    Type: String
    Default: SubscriptionRenewalQueue
  TransactionsQueueName:
    Type: String
    Default: TransactionsQueue
  PaymentNotificationsQueueName:
    Type: String
    Default: PaymentNotificationsQueue
  PaymentSuccessfulEmailTemplateKey:
    Type: String
    Default: payment_successful.html
  TransactionsTopicName:
    Type: String
    Default: Transactions

Resources:
  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: RDS Credentials
      Name: !Ref SecretName
      SecretString: !Sub "{\"username\": \"${DBUsername}\", \"password\": \"${DBPassword}\"}"
  DBSecretRDSInstanceAttachment:
    Type: AWS::SecretsManager::SecretTargetAttachment
    Properties:
      SecretId: !Ref DBSecret
      TargetId: !Ref DBInstanceName
      TargetType: AWS::RDS::DBInstance

  BlogApplicationDependencies:
    Type: AWS::Lambda::LayerVersion
    Properties:
      CompatibleArchitectures:
        - x86_64
      CompatibleRuntimes:
        - nodejs12.x
        - nodejs14.x
        - nodejs16.x
      Content: dependencies/
      Description: "Dependencies layer for Blog Application"
      LayerName: "BlogApplicationDependencies"
      LicenseInfo: "MIT"

  Register:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/user/register/
      Handler: index.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          DB_CONFIG_SECRET_ID: !Ref SecretName
          REGION: !Ref AWS::Region
          SECRET_KEY: !Ref SecretKey
      VpcConfig:
        SubnetIds:
          - !Ref LambdaSubnet
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Role: !Ref LambdaRoleArn
      Layers:
        - !Ref BlogApplicationDependencies
      Events:
        PostRequest:
          Type: Api
          Properties:
            Path: /register
            Method: post
            RestApiId:
              Ref: BlogApplicationAPI

  Login:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/user/login/
      Handler: index.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Layers:
        - !Ref BlogApplicationDependencies
      Environment:
        Variables:
          DB_CONFIG_SECRET_ID: !Ref SecretName
          REGION: !Ref AWS::Region
          SECRET_KEY: !Ref SecretKey
      VpcConfig:
        SubnetIds:
          - !Ref LambdaSubnet
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Role: !Ref LambdaRoleArn
      Events:
        PostRequest:
          Type: Api
          Properties:
            Path: /login
            Method: post
            RestApiId:
              Ref: BlogApplicationAPI

  CreatePost:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/post/create-post/
      Handler: index.handler
      Runtime: nodejs16.x
      Layers:
        - !Ref BlogApplicationDependencies
      Architectures:
        - x86_64
      Environment:
        Variables:
          DB_CONFIG_SECRET_ID: !Ref SecretName
          REGION: !Ref AWS::Region
      VpcConfig:
        SubnetIds:
          - !Ref LambdaSubnet
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Role: !Ref LambdaRoleArn
      Events:
        PostRequest:
          Type: Api
          Properties:
            Path: /posts
            Method: post
            RestApiId:
              Ref: BlogApplicationAPI

  EmailBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref EmailBucketName

  NotifyUsers:
    Type: AWS::Serverless::Function
    DependsOn:
      - EmailBucket
    Properties:
      CodeUri: functions/user/notify/
      Handler: index.handler
      Runtime: nodejs16.x
      Layers:
        - !Ref BlogApplicationDependencies
      Architectures:
        - x86_64
      Environment:
        Variables:
          BUCKET: !Ref EmailBucket
          REGION: !Ref AWS::Region
          DB_CONFIG_SECRET_ID: !Ref SecretName
          FROM: !Ref FromEmailAddress
          QUEUE_URL: !Ref EmailQueue
      VpcConfig:
        SubnetIds:
          - !Ref LambdaSubnet
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Role: !Ref LambdaRoleArn
      Events:
        PostRequest:
          Type: Api
          Properties:
            Path: /users/notify
            Method: post
            RestApiId:
              Ref: BlogApplicationAPI

  TransactionsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref TransactionsQueueName
      DelaySeconds: 0
      VisibilityTimeout: 30
      MessageRetentionPeriod: 345600
      ReceiveMessageWaitTimeSeconds: 0

  TransactionsQueuePoller:
    Type: AWS::Serverless::Function
    DependsOn:
      - TransactionsQueue
    Properties:
      CodeUri: functions/subscription-renewal/save-transaction/
      Handler: index.handler
      Runtime: nodejs16.x
      Layers:
        - !Ref BlogApplicationDependencies
      Architectures:
        - x86_64
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          TRANSACTIONS_QUEUE_URL: !Ref TransactionsQueue
          DB_CONFIG_SECRET_ID: !Ref SecretName
      VpcConfig:
        SubnetIds:
          - !Ref LambdaSubnet
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Role: !Ref LambdaRoleArn
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt TransactionsQueue.Arn
  
  PaymentNotificationsQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref PaymentNotificationsQueueName
      DelaySeconds: 0
      VisibilityTimeout: 30
      MessageRetentionPeriod: 345600
      ReceiveMessageWaitTimeSeconds: 0

  PaymentNotificationsQueuePoller:
    Type: AWS::Serverless::Function
    DependsOn:
      - PaymentNotificationsQueue
    Properties:
      CodeUri: functions/subscription-renewal/notify-user/
      Handler: index.handler
      Runtime: nodejs16.x
      Layers:
        - !Ref BlogApplicationDependencies
      Architectures:
        - x86_64
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          EMAIL_TEMPLATES_BUCKET_NAME: !Ref EmailBucketName
          PAYMENT_SUCCESSFUL_EMAIL_TEMPLATE_KEY: !Ref PaymentSuccessfulEmailTemplateKey
          FROM_EMAIL: !Ref FromEmailAddress
          PAYMENT_NOTIFICATIONS_QUEUE_URL: !Ref PaymentNotificationsQueue
          DB_CONFIG_SECRET_ID: !Ref SecretName
      Role: !Ref LambdaRoleArn
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt PaymentNotificationsQueue.Arn

  TransactionsTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: !Ref TransactionsTopicName

  TransactionsTopicSubscriptionForTransactionsQueue:
    Type: AWS::SNS::Subscription
    DependsOn:
      - TransactionsQueue
      - TransactionsTopic
    Properties: 
      Endpoint: !GetAtt TransactionsQueue.Arn
      Protocol: sqs
      RawMessageDelivery: true
      Region: !Sub "${AWS::Region}"
      TopicArn: !Ref TransactionsTopic

  TransactionsTopicSubscriptionForPaymentNotificationsQueue:
    Type: AWS::SNS::Subscription
    DependsOn:
      - PaymentNotificationsQueue
      - TransactionsTopic
    Properties:
      Endpoint: !GetAtt PaymentNotificationsQueue.Arn
      Protocol: sqs
      RawMessageDelivery: true
      Region: !Sub "${AWS::Region}"
      TopicArn: !Ref TransactionsTopic

  TransactionsQueuePolicyForSNS:
    Type: AWS::SQS::QueuePolicy
    DependsOn:
      - TransactionsQueue
    Properties:
      PolicyDocument:
        Id: TransactionsQueuePolicyForSNS
        Version: '2012-10-17'
        Statement:
          - Sid: TransactionsQueuePolicyForSNS
            Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action:
              - sqs:SendMessage
            Resource: 
              - !GetAtt TransactionsQueue.Arn
      Queues:
        - !Ref TransactionsQueue

  PaymentNotificationsQueuePolicyForSNS:
    Type: AWS::SQS::QueuePolicy
    DependsOn:
      - PaymentNotificationsQueue
    Properties:
      PolicyDocument:
        Id: PaymentNotificationsQueuePolicyForSNS
        Version: '2012-10-17'
        Statement:
          - Sid: PaymentNotificationsQueuePolicyForSNS
            Effect: Allow
            Principal:
              Service: sns.amazonaws.com
            Action:
              - sqs:SendMessage
            Resource: 
              - !GetAtt PaymentNotificationsQueue.Arn
      Queues:
        - !Ref PaymentNotificationsQueue

  SubscriptionRenewalQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref SubscriptionRenewalQueueName
      DelaySeconds: 0
      VisibilityTimeout: 30
      MessageRetentionPeriod: 345600
      ReceiveMessageWaitTimeSeconds: 0

  SubscriptionRenewalQueuePoller:
    Type: AWS::Serverless::Function
    DependsOn:
      - SubscriptionRenewalQueue
      - TransactionsTopic
    Properties:
      CodeUri: functions/subscription-renewal/process-payment/
      Handler: index.handler
      Runtime: nodejs16.x
      Layers:
        - !Ref BlogApplicationDependencies
      Architectures:
        - x86_64
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          SUBSCRIPTION_RENEWAL_QUEUE_URL: !Ref SubscriptionRenewalQueue
          TRANSACTIONS_TOPIC_ARN: !Ref TransactionsTopic
          DB_CONFIG_SECRET_ID: !Ref SecretName
      VpcConfig:
        SubnetIds:
          - !Ref LambdaSubnet
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Role: !Ref LambdaRoleArn
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt SubscriptionRenewalQueue.Arn

  FetchAllSubscriptions:
    Type: AWS::Serverless::Function
    DependsOn:
      - SubscriptionRenewalQueue
      - TransactionsTopic
    Properties:
      CodeUri: functions/subscription-renewal/fetch-all-subscriptions/
      Handler: index.handler
      Runtime: nodejs16.x
      Layers:
        - !Ref BlogApplicationDependencies
      Architectures:
        - x86_64
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          SUBSCRIPTION_RENEWAL_QUEUE_URL: !Ref SubscriptionRenewalQueue
          DB_CONFIG_SECRET_ID: !Ref SecretName
      VpcConfig:
        SubnetIds:
          - !Ref LambdaSubnet
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Role: !Ref LambdaRoleArn

  SubscriptionRenewalScheduledTask:
    Type: AWS::Events::Rule
    DependsOn:
      - FetchAllSubscriptions
    Properties: 
      Description: A scheduled task which renews all subscriptions at every 25th of month
      Name: SubscriptionRenewalScheduledTask
      ScheduleExpression: cron(0 8 25 * ? *)
      State: ENABLED
      Targets: 
        - 
          Arn: !GetAtt FetchAllSubscriptions.Arn
          Id: FetchAllSubscriptions

  PermissionsForSubscriptionRenewalScheduledTaskToInvokeLambda:
    Type: AWS::Lambda::Permission
    DependsOn:
      - FetchAllSubscriptions
      - SubscriptionRenewalScheduledTask
    Properties: 
      FunctionName: !Ref FetchAllSubscriptions
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt SubscriptionRenewalScheduledTask.Arn

  EmailQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Ref EmailQueueName
      DelaySeconds: 0
      VisibilityTimeout: 30
      MessageRetentionPeriod: 345600
      ReceiveMessageWaitTimeSeconds: 0
  
  EmailQueuePoller:
    Type: AWS::Serverless::Function
    DependsOn:
      - EmailQueue
    Properties:
      CodeUri: functions/email-queue-poller/
      Handler: index.handler
      Runtime: nodejs16.x
      Layers:
        - !Ref BlogApplicationDependencies
      Architectures:
        - x86_64
      Environment:
        Variables:
          REGION: !Ref AWS::Region
          QUEUE_URL: !Ref EmailQueue
      Role: !Ref LambdaRoleArn
      Events:
        MySQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt EmailQueue.Arn
  
  LambdaTokenAuthorizer:
    Type: 'AWS::Serverless::Function'
    Properties:
      CodeUri: functions/authorizer/
      Handler: index.handler
      Runtime: nodejs16.x
      Layers:
        - !Ref BlogApplicationDependencies
      Architectures:
        - x86_64
      Description: Token based HTTP request authorizer.
      Role: !Ref LambdaRoleArn
      Environment:
        Variables:
          SECRET_KEY: !Ref SecretKey
  
  BlogApplicationAPI:
    Type: AWS::Serverless::Api
    DependsOn:
      - LambdaTokenAuthorizer
      - Register
      - Login
      - CreatePost
      - NotifyUsers
    Properties:
      StageName: !Ref StageName
      DefinitionBody:
        swagger: 2.0
        info:
          title: Blog API
        paths:
          /register:
            post:
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Register.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /login:
            post:
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${Login.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /posts:
            post:
              responses: {}
              security:
                - LambdaTokenAuthorizer: []
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CreatePost.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
          /users/notify:
            post:
              responses: {}
              x-amazon-apigateway-integration:
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NotifyUsers.Arn}/invocations"
                passthroughBehavior: "when_no_match"
                httpMethod: POST
                type: aws_proxy
        securityDefinitions:
          LambdaTokenAuthorizer:
            type: "apiKey"
            name: "authorizationToken"
            in: "header"
            x-amazon-apigateway-authtype: "custom"
            x-amazon-apigateway-authorizer:
              type: "token"
              authorizerUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaTokenAuthorizer.Arn}/invocations"
              authorizerResultTtlInSeconds: 0

  BlogApplicationAPILambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref LambdaTokenAuthorizer
      Principal: "apigateway.amazonaws.com"
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${BlogApplicationAPI}/*"

  GetUserSubscriptionDetails:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/user-subscription/get/
      Handler: index.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          DB_CONFIG_SECRET_ID: !Ref SecretName
          REGION: !Ref AWS::Region
      VpcConfig:
        SubnetIds:
          - !Ref LambdaSubnet
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Role: !Ref LambdaRoleArn
      Layers:
        - !Ref BlogApplicationDependencies
  
  GetSubscription:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/subscription/get/
      Handler: index.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          DB_CONFIG_SECRET_ID: !Ref SecretName
          REGION: !Ref AWS::Region
      VpcConfig:
        SubnetIds:
          - !Ref LambdaSubnet
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Role: !Ref LambdaRoleArn
      Layers:
        - !Ref BlogApplicationDependencies
  
  GetUser:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/user/get/
      Handler: index.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          DB_CONFIG_SECRET_ID: !Ref SecretName
          REGION: !Ref AWS::Region
      VpcConfig:
        SubnetIds:
          - !Ref LambdaSubnet
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Role: !Ref LambdaRoleArn
      Layers:
        - !Ref BlogApplicationDependencies
  
  ChargeCustomer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/user/charge/
      Handler: index.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          DB_CONFIG_SECRET_ID: !Ref SecretName
          REGION: !Ref AWS::Region
      VpcConfig:
        SubnetIds:
          - !Ref LambdaSubnet
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Role: !Ref LambdaRoleArn
      Layers:
        - !Ref BlogApplicationDependencies
  
  SaveTransaction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/transaction/save/
      Handler: index.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          DB_CONFIG_SECRET_ID: !Ref SecretName
          REGION: !Ref AWS::Region
      VpcConfig:
        SubnetIds:
          - !Ref LambdaSubnet
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Role: !Ref LambdaRoleArn
      Layers:
        - !Ref BlogApplicationDependencies
  
  ExtendSubscription:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/subscription/extend/
      Handler: index.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          DB_CONFIG_SECRET_ID: !Ref SecretName
          REGION: !Ref AWS::Region
      VpcConfig:
        SubnetIds:
          - !Ref LambdaSubnet
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Role: !Ref LambdaRoleArn
      Layers:
        - !Ref BlogApplicationDependencies
  
  RemoveTransaction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/transaction/remove/
      Handler: index.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          DB_CONFIG_SECRET_ID: !Ref SecretName
          REGION: !Ref AWS::Region
      VpcConfig:
        SubnetIds:
          - !Ref LambdaSubnet
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Role: !Ref LambdaRoleArn
      Layers:
        - !Ref BlogApplicationDependencies
  
  RefundToCustomer:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/user/refund/
      Handler: index.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          DB_CONFIG_SECRET_ID: !Ref SecretName
          REGION: !Ref AWS::Region
      VpcConfig:
        SubnetIds:
          - !Ref LambdaSubnet
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Role: !Ref LambdaRoleArn
      Layers:
        - !Ref BlogApplicationDependencies
  
  SendEmail:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/email/send/
      Handler: index.handler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Environment:
        Variables:
          DB_CONFIG_SECRET_ID: !Ref SecretName
          REGION: !Ref AWS::Region
          FROM_EMAIL: !Ref FromEmailAddress
      VpcConfig:
        SubnetIds:
          - !Ref LambdaSubnet
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
      Role: !Ref LambdaRoleArn
      Layers:
        - !Ref BlogApplicationDependencies

  SubscriptionRenewalStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      DefinitionUri: state_machines/subscriptionRenewalStepFunction.asl.json
      DefinitionSubstitutions:
        GetUserSubscriptionDetailsArn: !GetAtt GetUserSubscriptionDetails.Arn
        GetSubscriptionArn: !GetAtt GetSubscription.Arn
        GetUserArn: !GetAtt GetUser.Arn
        ChargeCustomerArn: !GetAtt ChargeCustomer.Arn
        SaveTransactionArn: !GetAtt SaveTransaction.Arn
        ExtendSubscriptionArn: !GetAtt ExtendSubscription.Arn
        RemoveTransactionArn: !GetAtt RemoveTransaction.Arn
        RefundToCustomerArn: !GetAtt RefundToCustomer.Arn
        SendEmailArn: !GetAtt SendEmail.Arn
      Policies:
        - LambdaInvokePolicy:
            FunctionName: !Ref GetUserSubscriptionDetails
        - LambdaInvokePolicy:
            FunctionName: !Ref GetSubscription
        - LambdaInvokePolicy:
            FunctionName: !Ref GetUser
        - LambdaInvokePolicy:
            FunctionName: !Ref ChargeCustomer
        - LambdaInvokePolicy:
            FunctionName: !Ref SaveTransaction
        - LambdaInvokePolicy:
            FunctionName: !Ref ExtendSubscription
        - LambdaInvokePolicy:
            FunctionName: !Ref RemoveTransaction
        - LambdaInvokePolicy:
            FunctionName: !Ref RefundToCustomer
        - LambdaInvokePolicy:
            FunctionName: !Ref SendEmail
    DependsOn: 
      - GetUserSubscriptionDetails
      - GetSubscription
      - GetUser
      - ChargeCustomer
      - SaveTransaction
      - ExtendSubscription
      - RemoveTransaction
      - RefundToCustomer
      - SendEmail

Outputs:
  BlogApplicationAPI:
    Description: "API Gateway endpoint URL for ${StageName} stage for BlogApplicationAPI"
    Value: !Sub "https://${BlogApplicationAPI}.execute-api.${AWS::Region}.amazonaws.com/${StageName}/"
